close all;clear;
close all;clear;

% addpath('/mnt/leif/littlab/users/nghosn3/Pioneer/spikes-AED/aed_dose_modeling/figures_code')
% addpath('/mnt/leif/littlab/users/nghosn3/Pioneer/DATA');
% addpath('/mnt/leif/littlab/users/nghosn3/Pioneer/spikes-AED/aed_dose_modeling')
 addpath('/Volumes/users/nghosn3/Pioneer/spikes-AED/aed_dose_modeling/figures_code')
 addpath('/Volumes/users/nghosn3/Pioneer/DATA');
 addpath('/Volumes/users/nghosn3/Pioneer/spikes-AED/aed_dose_modeling')


% Get which patients
%cohort_info = readtable('MedGivenCommonMRNs_DI.csv');
cohort_info = readtable('bella_pts_meds.csv');
all_meds = readtable('bella_pts_meds.csv');
ptIDs =unique(cohort_info.Record_ID);

% find the HUP ID, if exists
add_hupid = 0;
if add_hupid
    hupids = nan(length(ptIDs),1);
    for i=0:ptIDs(end)
        hup_ind = find(i==cohort_info.ptID);
        if ~isempty(hup_ind)
            hupids(i+1) = cohort_info.HUP_ID(hup_ind(1));
        else
            hupids(i+1) = NaN;
        end

    end
end

% check which patients are common
cohort_info_asm = readtable('HUP_implant_dates.xlsx');
ptIDs_asm = cohort_info_asm.ptID;

%test with random weights 
weights = ones(1,length(ptIDs))*70; % assume weight for all is 70kg

% test hup
% ptIDs = ptIDs(hupids ==138);
% weights =weights(1);

[all_dose_curves,all_Hr,ptIDs,all_med_names,ieeg_offset] = get_aed_curve_nlp(ptIDs,weights); % data from nlp - edit to check for hups and sz times 

%% get which seizures are followed by ativan and the drug levels
all_seizures =table(); % add ptID, seizure ID, preictal AED load, and binary yes/no for ativan admin w/in 1hr

%% find the seizures followed by ativan administration
aed_decrease = zeros(3,length(ptIDs));

all_times = [];
seizure_offsets = [];
start_ind =1;
all_implant_dates=NaT(1,length(ptIDs));
all_explant_dates=NaT(1,length(ptIDs));
initial_load=NaN(length(ptIDs),1);
num_meds = NaN(length(ptIDs),1);

for ipt=1:length(ptIDs)
    
    ptID = ['HUP' num2str(ptIDs(ipt))];
%     offsets = ieeg_offset{2,ipt};
%     ieeg_offset_datasets = ieeg_offset{1,ipt};
    
    %get drug curve to grab daily levels
    [~,meds,explant_date,implant_date] = parse_MAR_nlp(ptIDs(ipt),all_meds);
    pt_ind = cohort_info.Record_ID == ptIDs(ipt);
    cohort_info.Implant_Date(pt_ind) = implant_date(1);
    cohort_info.Explant_Date(pt_ind) = explant_date(1);

    all_implant_dates(ipt) =  implant_date(1);
    all_explant_dates(ipt) = explant_date(1);
    med_names = all_med_names{ipt};

    
    % get the total AED dose over time
    drugs =zeros(length(med_names),round(600*60)); %450 hours of EMU stay in minutes
    all_dstarts = [];
    for i =1:length(med_names)
        drug=all_dose_curves{ipt}{i};
        drug=drug./nanmax(drug); %normalize each drug curve
        if ~isempty(drug)
            dStart = round(all_Hr{ipt}{i}(1)*60)-1;
            all_dstarts = [all_dstarts dStart];
            drugs(i,dStart+1:dStart+length(drug))=drug;
        end
    end
    drug_sum=nansum(drugs,1);
    drug_sum=drug_sum./(length(med_names)); %normalize for number of drugs
    drug_sum(drug_sum==0) =NaN; %not include all zeros in average, and in histogram
    
    % med curves are sampled at one point per minute
    t0 = min(all_dstarts); %earliest time in min a drug was administered
    t1 = t0 + (24*60);
    t2 = t1 + (24*60);
    
    day1_decrease = (nanmean(drug_sum(t0:t1))-nanmean(drug_sum(t1:t2)))./ (nanmean(drug_sum(t0:t1)));
    initial_load(ipt) = nanmean(drug_sum(t0:t1)); % the average drug load on day 1;
    num_meds(ipt) = length(med_names); 
    %day2_decrease = (nanmean(drug_sum(t0:t1))-nanmean(drug_sum(t2:t3)))./ (nanmean(drug_sum(t0:t1)));
    
    aed_decrease(1,ipt) = day1_decrease;
    
%     % get seizure times
%     [seizure_times] = convert_sz_to_emu_time(offsets,ieeg_offset_datasets,ptID); % seizure times in hours of EMU stay
%     
%     end_ind = start_ind + length(seizure_times);
%     
%     % convert seizure times to indices, so to minutes
%     seizure_inds = round(seizure_times(:,1) *60);
%     
%     %Get ativan times
%     [~,meds,~] = parse_MAR(ptID,all_meds);
%     ativan_inds = strcmp(meds.medication,'lorazepam');
%     times = meds.admin_time(ativan_inds);
%     
%     
%     time_to_closest_sz = nan(length(seizure_times(:,1)),2);
%     for n=1:length(seizure_times(:,1))
%         sz_diffs = seizure_times(n,1)-times;
%         before_ativan = sz_diffs< 0;
%         if ~isempty(times)
%             if ~isempty(before_ativan) && ~(sum(before_ativan)==0)
%                 [mval,~]=min(abs(sz_diffs(before_ativan)));
%                 ind = find(abs(sz_diffs)==mval);
%                 time_to_closest_sz(n,:)=[times(ind(1)) seizure_times(n,1)];
%             end
%         end
%     end
%     all_seizures.ptID(start_ind:end_ind-1)=ptIDs(ipt)*ones(1,end_ind-start_ind);
%     all_seizures.seizureEEC(start_ind:end_ind-1) = seizure_times(:,1);
%     all_seizures.t_closest_ativan(start_ind:end_ind-1) =  time_to_closest_sz(:,1);
%     
%     start_ind = end_ind;
end

% all_seizures.ativan_sz = double(all_seizures.t_closest_ativan - all_seizures.seizureEEC <= 1 &  all_seizures.t_closest_ativan - all_seizures.seizureEEC >=0);
% 
% % get binary of that patient had a convulsion or not 
% has_conv = false(length(ptIDs),1);
% for i=1:length(ptIDs)
%    pt_inds = all_seizures.ptID == ptIDs(i);
%    has_conv(i) = any(all_seizures.ativan_sz(pt_inds));
% end
% 
% % get baseline seizure frequencies 
% baseline_sz_freqs = readtable('no_phi_baseline_sz_freq.xlsx');
% sz_freqs = zeros(length(ptIDs),1);
% for i = 1:length(ptIDs)
%     ind = baseline_sz_freqs.HUP_ID == ptIDs(i);
%     sz_freqs(i) = baseline_sz_freqs.sz_per_month(ind);
% end


% get time to first seizure (in EMU time for all)
% time_to_first_seizure = zeros(length(ptIDs),1);
% for i = 1:length(ptIDs)
%     ptID = ['HUP' num2str(ptIDs(i))];
%     offsets = ieeg_offset{2,i};
%     ieeg_offset_datasets = ieeg_offset{1,i};
%     [seizure_times] = convert_sz_to_emu_time(offsets,ieeg_offset_datasets,ptID);
%     time_to_first_seizure(i)=seizure_times(1); %the first seizure
% end

%% run model for severity 
tbl = table();
tbl.Record_ID = ptIDs;
tbl.asm_decrease = aed_decrease(1,:)'; %decrease from day 1 to 2
%tbl.baseline_sz_freq = (sz_freqs);%./max(sz_freqs); % normalize like other feature
tbl1 = tbl;
%tbl1.has_conv = double(has_conv);
%tbl.time_to_first_seizure = time_to_first_seizure;

% find -inf and negative values and make them zero for no decrease
zero_inds = tbl1.asm_decrease == -inf | tbl1.asm_decrease <0;
tbl1.asm_decrease(zero_inds)=0;



%% run model for length of stay
tbl2 = tbl;
tbl2.length_stay =(all_explant_dates - all_implant_dates)';
tbl2.initial_load = initial_load;
zero_inds = tbl2.asm_decrease == -Inf ; % | tbl2.asm_decrease < 0
tbl2(zero_inds,:)=[];
% mdl_LOS = fitlm(tbl2)

%% plot stuff 
% figure;
% subplot(1,2,1);
% x1=tbl2.asm_decrease;
% x2 = tbl2.baseline_sz_freq;
% y= tbl2.length_stay;
% plot3(x1,x2,y,'.k','markersize',15); axis square; hold on;
%  
% %ylim([0 300])
% title('linear model for length of stay')
% xlabel('ASM decrease');ylabel('baseline seizure frequency');zlabel('length of stay (hrs)');
% 
% % plot mesh on top
% b = [mdl_LOS.Coefficients.Estimate];
% x1fit = linspace(min(x1),max(x1),50);
% x2fit = linspace(min(x2),max(x2),50);
% [X1FIT,X2FIT] = meshgrid(x1fit,x2fit);
% YFIT = b(1) + b(2)*X1FIT + b(3)*X2FIT;
% mesh(X1FIT,X2FIT,YFIT)
% 
% 
% subplot(1,2,2)
% decrease_had_conv =x1(has_conv);
% decrease_no_conv =x1(~has_conv);
% len = max([length(decrease_had_conv) length(decrease_no_conv)]);
% data = nan(2,len);
% data(1,1:length( decrease_had_conv))= decrease_had_conv;
% data(2,1:length( decrease_no_conv))= decrease_no_conv; 
% 
% boxplot(data',[{'no ativan sz'},{'had ativan sz'}]); axis square;
% [p,h,stats]=ranksum(decrease_had_conv,decrease_no_conv)
% save_path='/Users/ninaghosn/Documents/Litt_Lab/projects/Pioneer/AED-taper-networks/results-figures/';
% %print([save_path 'fig04_los_conv.eps'],'-depsc2','-painters', '-tiff', '-r300', '-f')


% coefs = mdl_severity.Coefficients.Estimate(2:end);
% SEs = mdl_severity.Coefficients.SE(2:end);
% ORs = exp(coefs);
% CIs = exp([coefs+(1.96*SEs) coefs-(1.96*SEs)]);
% coef_names=mdl_severity.CoefficientNames(2:end);
% inds = length(ORs):-1:1;
% 
% neg = ORs-CIs(:,2);
% pos = CIs(:,1)-ORs;
% errorbar(ORs,inds,neg,pos,'.k','horizontal','linewidth',2); hold on;
% plot((ORs),inds,'.r','markersize',20); axis square;
% xline(1,'--r','linewidth',1.5)
% yticks(1:length(ORs))
% yticklabels(coef_names(inds))
% xlabel('Odds Ratio'); 

function out = func2(x)
if length(x)>2
    out = x(3);
else
    out =NaN;
end
end
%% try one model with all pts for each drug - use features matrix generated by aed_mixed_model
close all;
med_feat = med_feats(1:end-2,:);
sz_feats = med_feats(end,:);
med_names = feat_names(1:end-2);

figure;
for n = 1:height(med_feat)
    
    pts = ptIDs;
    sz_bins = sz_feats(end,:);
    feats = med_feat(n,:);
    iter=10;
    
    % remove the pts that didnt take this aed
    has_aed = cellfun(@sum,feats) > 0;
    this_feats = feats(1,has_aed);
    this_pts = pts(has_aed);
    this_sz_bins = sz_bins(1,has_aed);
    
    
    AUCs = zeros(1,iter);
    xROCs = cell(iter,1);
    yROCs = cell(iter,1);
    accuracies = zeros(1,iter);
    
    for i = 1:iter
        pt_inds = randperm(length(this_pts));
        split=floor(.6*length(this_pts));
        train_inds = pt_inds(1:split);
        test_inds = pt_inds(split+1:end);
        
        
        feats_test = [];
        labels_test=horzcat(this_sz_bins{test_inds})+1;
        for l =1:height(this_feats)
            %feat_name = feat_names{i};
            this_feat = this_feats(l,test_inds);
            this_feat = horzcat(this_feat{:})';
            feats_test = [feats_test; this_feat'];
            
        end
        
        feats_train = [];
        labels_train=horzcat(this_sz_bins{train_inds})+1;
        for l =1:height(this_feats)
            %feat_name = feat_names{i};
            this_feat = this_feats(l,train_inds);
            this_feat = horzcat(this_feat{:})';
            feats_train = [feats_train; this_feat'];
        end
        
        B = mnrfit(feats_train',labels_train');
        sz_hat = mnrval(B,feats_test');
        
        
        sz_prob = sz_hat(:,1);
        
        sz_and_pred = [labels_test', sz_prob];
        sz_inds = labels_test == 2;
        % to get accuracy, need to choose a seizure prediction threshold - base it off the distribution?
        
        sz_preds = sz_and_pred(sz_inds,:);
        nonsz_preds = sz_and_pred(~sz_inds,:);
        
        intervals= linspace(0, 1, 3000);
        [Xroc, Yroc, ~, AUCs(i)]= perfcurve(labels_test,sz_prob,1,'Xvals',intervals);
        subplot(3,4,n)
        plot(Xroc, Yroc, 'LineWidth', 1); hold on;
        
        %for getting an average of the ROC curves from each fold
        x_adj= adjust_unique_points(Xroc); %interp1 requires unique points
        if i==1 %if is the first fold
            mean_curve= (interp1(x_adj, Yroc, intervals))/iter;
        else
            mean_curve= mean_curve+ (interp1(x_adj, Yroc, intervals))/iter;
        end
    end
    
    subplot(3,4,n)
    plot(intervals, mean_curve, 'Color', 'Black', 'LineWidth', 3.0);
    axis square; title([med_names{n} ': AUC = ' num2str(mean(AUCs))])
    ylabel('TPR'); xlabel('FPR'); xlim([0 1]); hold off;
    
    % plot prediction distributions
    % figure(2);
    % histogram(sz_prob(sz_inds));hold on;
    % histogram(sz_prob(~sz_inds));
    % legend({'seizure predicted','no seizure predicted'})
    
end

function x= adjust_unique_points(Xroc)
x= zeros(1, length(Xroc));
aux= 0.0001;
for i=1: length(Xroc)
    if i~=1
        x(i)= Xroc(i)+aux;
        aux= aux+0.0001;
    end
    
end
end

%% code to check if features arrays are different sizes
%
% train_sz_feats = sz_feats(train_inds);
% this_feat = med_feat(1, train_inds);
% diff_size = 0
% for i = 1:length(train_sz_feats)
%     diff_size = diff_size + (length(train_sz_feats{i}) - length(this_feat{i}))
%     if diff_size==4
%         break;end
% end